name: CI + CD

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  
  pull_request: 
    branches: [ main ]
    paths:
      - 'hello-spring-boot-docker/**'
  
  push: 
    branches: [ main ]
    paths:
      - 'hello-spring-boot-docker/**'
      
  workflow_dispatch:
  
env:
  REPO_PATH: 'sdsani/'
  ROOT_FOLDER: 'hello-spring-boot-docker'  
  
jobs:

  CI:
    name: CI
    if: github.event_name == 'pull_request'
    runs-on: ${{ matrix.os }}
    strategy:
      # Cancel all matrix jobs if one of them fails
      fail-fast: true
      matrix:
        # our matrix for testing acros OSs
        #os: [windows-2019, ubuntu-latest]
        os: [ubuntu-latest]

    steps:
      
      - name: Code Checkout
        uses: actions/checkout@v3
        with:
          github_token: env
          fetch-depth: 0
      
      - name: Set up JDK
        uses: actions/setup-java@v1      
        with:        
          java-version: "11"
      
      - name: Linter
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_HTML: true
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_JAVASCRIPT_STANDARD: true
    
      - name: Run tests using gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test
          build-root-directory: ${{env.ROOT_FOLDER}}

      - name: Build using Gradle
        if: github.event_name == 'pull_request'
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
          build-root-directory: ${{env.ROOT_FOLDER}}
          
      - name: What else
        run: |
          echo "What else should be here?"
  CD:
    name: CD
    needs: [CI]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    strategy:
      # Cancel all matrix jobs if one of them fails
      fail-fast: true
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
      
    steps:          
      - name: Set up JDK    
        uses: actions/setup-java@v1      
        with:        
          java-version: "11"
          
      - name: Code Checout                             
        uses: actions/checkout@v3
        with:
            fetch-depth: 0
            
      - name: Set up Docker environment
        uses: docker/setup-buildx-action@v1
        
      - name: Symantic tagging/verioning
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ""
          custom_release_rules: | 
            bug:patch:Bug Fixes,
            chore:patch:Chores,            
            perf:patch:Performance Improvement,
            ci:patch:Continuous Integration,
            docs:patch:Documentation Improvement,
            style:patch:Code Style,
            refactor:patch:Refactoring/TODO's,
            test:patch:Tests,
            feat:minor:New Functionality,
            feature:minor:New Functionality,
            minor_upd:minor:Minor Update,
            major_upd:major:Major Update,
            major:major:Major Update
  
      - name: Build docker image
        uses: gradle/gradle-build-action@v2
        with:
          arguments: bootBuildImage
          build-root-directory: hello-spring-boot-docker
       
      - name: Docker login
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Tag and push docker images
        run: |
          #https://pakstech.com/blog/github-actions-workflow-commands/
          echo $GITHUB_REPOSITORY
          echo $new_tag
          echo ${{ github.event.repository.name }}
          docker tag ${{env.REPO_PATH}}${{env.ROOT_FOLDER}}:latest ${{env.REPO_PATH}}${{env.ROOT_FOLDER}}:$new_tag 
          docker images
          docker push ${{env.REPO_PATH}}${{env.ROOT_FOLDER}}:latest
          docker push ${{env.REPO_PATH}}${{env.ROOT_FOLDER}}:$new_tag
        env:
          new_tag: ${{steps.tag_version.outputs.new_tag}}
  
  DeployDev:
    name: Deploy In Development environment
    needs: [CD]
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      # Cancel all matrix jobs if one of them fails
      fail-fast: true
    steps:
      
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Deploy
        run: |
          echo ${{env.GITHUB_EVENT_NAME}}
          docker pull ${{env.REPO_PATH}}${{env.ROOT_FOLDER}}
          docker images
          echo "WIP: Deploy to development steps not implemented yet."
          echo "New tag created in CD passed to Deploy : "${{needs.cd.outputs.new_tag}}
  
  DeployStage:
    name: Deploy In Staging environment
    needs: [CD]
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      # Cancel all matrix jobs if one of them fails
      fail-fast: true
    steps:
      
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Deploy
        run: |
          echo ${{env.GITHUB_EVENT_NAME}}
          docker pull ${{env.REPO_PATH}}${{env.ROOT_FOLDER}}
          docker images
          echo "WIP: Deploy to development steps not implemented yet."
          echo "New tag created in CD passed to Deploy : "${{needs.cd.outputs.new_tag}}
  
  DeployProd:
    name: Deploy In Production
    needs: [DeployStage]
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      # Cancel all matrix jobs if one of them fails
      fail-fast: true
    steps:
      
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@main
        with:
          configuration: 'release-changelog-builder-config.json'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Deploy
        run: |
          echo ${{env.GITHUB_EVENT_NAME}}
          docker pull ${{env.REPO_PATH}}${{env.ROOT_FOLDER}}
          docker images
          echo "WIP: Deploy to Production steps not implemented yet."
          echo "New tag created in CD passed to Deploy : "${{needs.cd.outputs.new_tag}}
          
      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{steps.build_changelog.outputs.changelog}}
          draft: false
          prerelease: false
